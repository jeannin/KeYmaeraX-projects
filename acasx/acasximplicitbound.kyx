SharedDefinitions.
  R hp. /* puck height */
  R rp. /* puck radius */
  R a.  /* minimal vertical acceleration */
  R aM. /* maximum vertical acceleration */

  R abs(R).
  R max(R, R).
  R min(R, R).

  /* velocity bound 1 = lower, -1 = upper */
  R wUp() = (-1).
  R wLo() = (1).

  R maxI(R w, R dhf, R dhd) = ( max(0, w * (dhf - dhd)) ).
  R maxIM(R w, R dhfM, R dhd) = ( max((0,w*(dhfM-dhd))) ).

  /* Remark: under the condition w*dhd<=w*dhfM, we always have dhfM = (dhd+w*maxIM) */
  B CM(R w, R dhfM, R dhd, R r, R h) <-> (
    \forall t \forall ro \forall ho (
        (t<=tl-to | tl<0) & ((0 <= t & t < maxI(w,dhfM,dhd)/aM() & ro = rv * t & ho = (w * aM())/2 * t^2 + dhd * t)
      | (t >= maxI(w,dhfM,dhd)/aM() & ro = rv * t & ho = (dhd+w*maxI(w,dhfM,dhd)) * t - w * maxI(w,dhfM,dhd)^2/(2*aM())))
      -> (abs(r - ro) > rp() | w * h > w * ho + hp())
    )
  ).

  /* todo adapt names to paper r=r, h=h, dhd=v, w=w, dhf=vlo */
  B C(R w, R dhf, R dhd, R r, R h) <-> (
    \forall t \forall ro \forall ho (
        (t<=tl-to | tl<0) & ((0 <= t & t < maxI(w,dhf,dhd)/a() & ro = rv * t & ho = (w * a())/2 * t^2 + dhd * t)
      | (t >= maxI(w,dhf,dhd)/a() & ro = rv * t & ho = dhf * t - w * maxI(w,dhf,dhd)^2/(2*a())))
      -> (abs(r - ro) > rp() | w * h < w * ho - hp())
    )
  ).

  /* todo refactoring idea: might be possible to define C and CM from same base def. */
  /* B C(R w, R dhf, R dhd, R r, R h) <-> ( CBase(w, dhf, dhd, r, h, a(), -hp()) ). */
  /* B CM(R w, R dhfM, R dhd, R r, R h) <-> ( CBase(w, dhfM, dhd, r, h, aM(), hp()) ). */
  /* B CBase(R w, R dhf, R dhd, R r, R h, R a2, R hp2) <-> (
    \forall t \forall ro \forall ho (
        (0 <= t & t < maxI(w,dhf,dhd)/a2 & ro = rv * t & ho = (w * a2)/2 * t^2 + dhd * t)
      | (t >= maxI(w,dhf,dhd)/a2 & ro = rv * t & ho = dhf * t - w * maxI(w,dhf,dhd)^2/(2*a2))
      -> (abs(r - ro) > rp() | w * h < w * ho + hp2)
    )
  ).*/

  B initBounds() <-> ( hp()>0 & rp()>=0 & rv>=0 ).

  B init(R a) <-> ( initBounds() & a>0 ).

  B initAll() <-> ( initBounds() & a()>0 & aM()>0 ).

  B loopInv(R w, R dhf, R dhfM, R dhd, R r, R h) <-> (
    ((w=wUp() | w=wLo()) & (to<=tl | tl<0) & (C(w,dhf,dhd,r,h) | CM(w,dhfM,dhd,r,h))) & initAll()
  ).

  B advisory(R w, R dhf, R dhd, R ao) <-> ( w*dhd>=w*dhf|w*ao>=a() ).

  B advisoryUp(R w, R dhfM, R dhd, R ao) <-> ( (w*dhd<=w*dhfM & w*ao<=aM|w*ao<=0) ).

  B evolutionDomain(R w, R dhf, R dhfM, R dhd, R ao) <-> ( advisory(w,dhf,dhd,ao) & advisoryUp(w,dhfM,dhd,ao) ).

  HP motion ::= { {r' = -rv, h' = -dhd, dhd' = ao &
                             evolutionDomain(w,dhf,dhfM,dhd,ao) }
  }.

End.



Lemma "Theorem 4: Correctness of lower bound".

ProgramVariables.
  /** Variables **/
   /* horizontal */
  R r.    /* relative distance in ft; xi - xo */
          /* x = r */
  R rv.   /* relative speed -(vi - vo) */
   /* vertical */
  R h.    /* relative altitude in ft */
          /* if negative: the intruder is lower than the ownship */
          /* h := hi - ho */
          /* z = h */
  R dhd.  /* vertical velocity of ownship */
  R dhf.  /* target minimum velocity */
  R dhfM. /* target maximum velocity (soft bound) */
  R w.    /* velocity bound 1 = lower, -1 = upper */
  R ao.   /* vertical acceleration of ownship */
  /** Constants **/
  R hp.   /* puck height */
  R rp.   /* puck radius */
  R a.    /* minimal vertical acceleration. Typically g/4 */
  R aM.   /* maximal vertical acceleration. Typically g/2 or g/3 */
  R tl.   /* time during which advisory needs to be followed */
  R to.   /* time passed since last advisory */

  R t.
  R ro.
  R ho.

  R t_. /*added variable*/

End.

/* LOWER BOUND */
Problem.
   t_>=0 &
   (t_+to<=tl|tl < 0) &
   \forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < maxI(w,dhf,dhd)/a&ro=rv*t&ho=w*a/2*t^2+dhd*t|t>=maxI(w,dhf,dhd)/a&ro=rv*t&ho=dhf*t-w*maxI(w,dhf,dhd)^2/(2*a))->abs(r-ro)>rp|w*h < w*ho-hp) &
   hp>0 &
   (w*dhd>=w*dhf|w*ao>=a) &
   (w*(ao*t_+dhd)>=w*dhf|w*ao>=a) &
   (w=-1|w=1) &
   rp>=0 &
   rv>=0 &
   a>0
 ->
   \forall t \forall ro \forall ho ((t<=tl-(t_+to)|tl < 0)&(0<=t&t < max((0,w*(dhf-(ao*t_+dhd))))/a&ro=rv*t&ho=w*a/2*t^2+(ao*t_+dhd)*t|t>=max((0,w*(dhf-(ao*t_+dhd))))/a&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-(ao*t_+dhd))))^2/(2*a))->abs((-rv)*t_+r-ro)>rp|w*(-(ao/2*t_^2+dhd*t_)+h) < w*ho-hp)
End.


Tactic "prove Theorem 4: correctness of lower bound".

print({`lemma`}); implyR('R); (andL('L)*);
  print({`Before skolem`}); (allR('R)*); print({`After skolem`});
  implyR('R); orR('R);
  allL( {`t_+t`}, 'L);
  allL( {`rv*(t_+t)`}, 'L);
  abbrv({`maxI(w,dhf,dhd)`}, {`maxI`});
  print({`Before cases`});
  cut({`0<=t_+t & t_+t<maxI/a | t_+t>=maxI/a`}); <(
    print({`Use cut`});
    orL('L=={`0<=t_+t & t_+t<maxI/a | t_+t>=maxI/a`}); <(
      print({`Goal 110`}); hideL('L=={`w*dhd>=w*dhf|w*ao>=a`});
      allL({`w*a/2*(t_+t)^2 + dhd*(t_+t)`}, 'L);
        print({`instantiate ho 1 Lo`});
          implyL('L=={`(t_+t<=tl-to|tl < 0)&(0<=t_+t&t_+t < maxI/a&rv*(t_+t)=rv*(t_+t)&w*a/2*(t_+t)^2+dhd*(t_+t)=w*a/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxI/a&rv*(t_+t)=rv*(t_+t)&w*a/2*(t_+t)^2+dhd*(t_+t)=dhf*(t_+t)-w*maxI^2/(2*a))->abs(r-rv*(t_+t))>rp|w*h < w*(w*a/2*(t_+t)^2+dhd*(t_+t))-hp`});
          <(
          print({`left of -> 1 Lo`}); andL('L);
            hideR('R=={`abs((-rv)*t_+r-ro)>rp`}); hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h)<w*ho-hp`});
            doall(orL('L))*; doall(print({`tl 1 QE`}) & QE);
            done
          ,
          print({`right of -> 1 Lo`});
            andL('L=={`(t<=tl-(t_+to)|tl < 0)&(0<=t&t < max((0,w*(dhf-(ao*t_+dhd))))/a&ro=rv*t&ho=w*a/2*t^2+(ao*t_+dhd)*t|t>=max((0,w*(dhf-(ao*t_+dhd))))/a&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-(ao*t_+dhd))))^2/(2*a))`});
            hideL('L=={`t<=tl-(t_+to)|tl < 0`});
            doall(orL('L))*; doall(print({`tl 2 QE`}) & QE);
            done
          ),
       print({`final time in straight Lo`});
         allL({`dhf*(t_+t) - w*maxI^2/(2*a)`}, 'L);
         print({`instantiate ho 2 Lo`});
           implyL('L=={`(t_+t<=tl-to|tl < 0)&(0<=t_+t&t_+t < maxI/a&rv*(t_+t)=rv*(t_+t)&dhf*(t_+t)-w*maxI^2/(2*a)=w*a/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxI/a&rv*(t_+t)=rv*(t_+t)&dhf*(t_+t)-w*maxI^2/(2*a)=dhf*(t_+t)-w*maxI^2/(2*a))->abs(r-rv*(t_+t))>rp|w*h < w*(dhf*(t_+t)-w*maxI^2/(2*a))-hp`});
           <(
            print({`left of -> 2 Lo`}); andL('L);
              hideL('L=={`maxI=max((0,w*(dhf-dhd)))`});
              hideR('R=={`abs((-rv)*t_+r-ro)>rp`}); hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h) < w*ho-hp`});
              doall(orL('L))*; doall(print({`final time in straight Lo QE`}) & QE);
              done
            ,
            print({`right of -> 2 Lo`});
              andL('L=={`(t<=tl-(t_+to)|tl < 0)&(0<=t&t < max((0,w*(dhf-(ao*t_+dhd))))/a&ro=rv*t&ho=w*a/2*t^2+(ao*t_+dhd)*t|t>=max((0,w*(dhf-(ao*t_+dhd))))/a&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-(ao*t_+dhd))))^2/(2*a))`});
              hideL('L=={`t_+to<=tl|tl < 0`});
              doall(orL('L))*; doall(print({`right of -> 2 Lo QE`}) & QE);
              done
          )
    )
    ,
    print({`SHOW CUT`});
      hideL('L=={`t_+to<=tl|tl < 0`});
      hideL('L=={`\forall ho ((t_+t<=tl-to|tl < 0)&(0<=t_+t&t_+t < maxI/a&rv*(t_+t)=rv*(t_+t)&ho=w*a/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxI/a&rv*(t_+t)=rv*(t_+t)&ho=dhf*(t_+t)-w*maxI^2/(2*a))->abs(r-rv*(t_+t))>rp|w*h < w*ho-hp)`});
      hideL('L=={`hp>0`});
      hideL('L=={`w*dhd>=w*dhf|w*ao>=a`});
      hideL('L=={`w*(ao*t_+dhd)>=w*dhf|w*ao>=a`});
      hideL('L=={`w=-1|w=1`});
      hideL('L=={`rp>=0`});
      hideL('L=={`rv>=0`});
      hideL('L=={`maxI=max((0,w*(dhf-dhd)))`});
      hideR('R=={`abs((-rv)*t_+r-ro)>rp`});
      hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h) < w*ho-hp`});
      QE
)

End.

End.



Lemma "Theorem 4: Correctness of upper bound".

ProgramVariables.
  /** Variables **/
   /* horizontal */
  R r.    /* relative distance in ft; xi - xo */
          /* x = r */
  R rv.   /* relative speed -(vi - vo) */
   /* vertical */
  R h.    /* relative altitude in ft */
          /* if negative: the intruder is lower than the ownship */
          /* h := hi - ho */
          /* z = h */
  R dhd.  /* vertical velocity of ownship */
  R dhf.  /* target minimum velocity */
  R dhfM. /* target maximum velocity (soft bound) */
  R w.    /* velocity bound 1 = lower, -1 = upper */
  R ao.   /* vertical acceleration of ownship */
  /** Constants **/
  R hp.   /* puck height */
  R rp.   /* puck radius */
  R a.    /* minimal vertical acceleration. Typically g/4 */
  R aM.   /* maximal vertical acceleration. Typically g/2 or g/3 */
  R tl.   /* time during which advisory needs to be followed */
  R to.   /* time passed since last advisory */

  R t.
  R ro.
  R ho.

  R t_. /*added variable*/

End.

/* UPPER BOUND */
Problem.
  t_>=0 &
  (t_+to<=tl|tl < 0) &
  \forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < maxIM(w,dhfM,dhd)/aM&ro=rv*t&ho=w*aM/2*t^2+dhd*t|t>=maxIM(w,dhfM,dhd)/aM&ro=rv*t&ho=(dhd+w*maxIM(w,dhfM,dhd))*t-w*maxIM(w,dhfM,dhd)^2/(2*aM))->abs(r-ro)>rp|w*h>w*ho+hp) &
  hp>0 &
  (w*dhd<=w*dhfM&w*ao<=aM|w*ao<=0) &
  (w*(ao*t_+dhd)<=w*dhfM&w*ao<=aM|w*ao<=0) &
  (w=-1|w=1) &
  rp>=0 &
  rv>=0 &
  aM>0
->
  \forall t \forall ro \forall ho ((t<=tl-(t_+to)|tl < 0)&(0<=t&t < max((0,w*(dhfM-(ao*t_+dhd))))/aM&ro=rv*t&ho=w*aM/2*t^2+(ao*t_+dhd)*t|t>=max((0,w*(dhfM-(ao*t_+dhd))))/aM&ro=rv*t&ho=(ao*t_+dhd+w*max((0,w*(dhfM-(ao*t_+dhd)))))*t-w*max((0,w*(dhfM-(ao*t_+dhd))))^2/(2*aM))->abs((-rv)*t_+r-ro)>rp|w*(-(ao/2*t_^2+dhd*t_)+h)>w*ho+hp)
End.


Tactic "prove Theorem 4: correctness of upper bound".

print({`lemma Up`}); implyR('R); andL('L)*;
  print({`Before skolem Up`}); allR('R)*; print({`After skolem Up`});
  implyR('R); orR('R);
  allL( {`t_+t`}, 'L);
  allL( {`rv*(t_+t)`}, 'L);
  print({`Before cases`});
  abbrv({`maxIM(w,dhfM,dhd)`}, {`maxIM`});
  cut({`0<=t_+t&t_+t<maxIM/aM | t_+t>=maxIM/aM`});
  <(
    print({`Use cut`});
    orL('L=={`0<=t_+t&t_+t<maxIM/aM | t_+t>=maxIM/aM`});
    <(
      print({`final time in parabola`});
        allL({`w*aM/2*(t_+t)^2+dhd*(t_+t)`}, 'L);
        print({`instantiate ho 1 Up`});
        implyL('L=={`(t_+t<=tl-to|tl < 0)&(0<=t_+t&t_+t < maxIM/aM&rv*(t_+t)=rv*(t_+t)&w*aM/2*(t_+t)^2+dhd*(t_+t)=w*aM/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxIM/aM&rv*(t_+t)=rv*(t_+t)&w*aM/2*(t_+t)^2+dhd*(t_+t)=(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM))->abs(r-rv*(t_+t))>rp|w*h>w*(w*aM/2*(t_+t)^2+dhd*(t_+t))+hp`});
        <(
          print({`left of -> 1 Up`});
          /* cohideR('R); cohideOnlyR('Rlast)
          hideL('L=={`maxIM=max((0,w*(dhfM-dhd)))`}); */
          print({`tl 1 QE`}); QE; done
          ,
          print({`right of -> 1 Up`});
          andL('L=={`(t<=tl-(t_+to)|tl < 0)&(0<=t&t < max((0,w*(dhfM-(ao*t_+dhd))))/aM&ro=rv*t&ho=w*aM/2*t^2+(ao*t_+dhd)*t|t>=max((0,w*(dhfM-(ao*t_+dhd))))/aM&ro=rv*t&ho=(ao*t_+dhd+w*max((0,w*(dhfM-(ao*t_+dhd)))))*t-w*max((0,w*(dhfM-(ao*t_+dhd))))^2/(2*aM))`});
          hideL('L=={`t<=tl-(t_+to)|tl < 0`});
          print({`right of -> 1 Up QE`}); QE; done
        ),
      print({`final time in straight Up`});
        allL({`(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)`}, 'L);
        print({`instantiate ho 2 Lo`});
        implyL('L=={`(t_+t<=tl-to|tl < 0)&(0<=t_+t&t_+t < maxIM/aM&rv*(t_+t)=rv*(t_+t)&(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)=w*aM/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxIM/aM&rv*(t_+t)=rv*(t_+t)&(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM)=(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM))->abs(r-rv*(t_+t))>rp|w*h>w*((dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM))+hp`});
        <(
        print({`left of -> 1 Up`});
          /*cohideR('R); cohideOnlyR('Rlast) try cohide2
          hideL('L=={`maxIM=max((0,w*(dhfM-dhd)))`});*/
          print({`left of -> 2 Up QE`}); QE; done
        ,
        print({`right of -> 2 Up`});
          andL('L=={`(t<=tl-(t_+to)|tl < 0)&(0<=t&t < max((0,w*(dhfM-(ao*t_+dhd))))/aM&ro=rv*t&ho=w*aM/2*t^2+(ao*t_+dhd)*t|t>=max((0,w*(dhfM-(ao*t_+dhd))))/aM&ro=rv*t&ho=(ao*t_+dhd+w*max((0,w*(dhfM-(ao*t_+dhd)))))*t-w*max((0,w*(dhfM-(ao*t_+dhd))))^2/(2*aM))`});
          hideL('L=={`t<=tl-(t_+to)|tl < 0`});
          doall(orL('L))*; doall(print({`right of -> 2 Up QE`}) & QE); done
        )
   ),
   print({`SHOW CUT`});
     hideL('L=={`t_+to<=tl|tl < 0`});
     hideL('L=={`\forall ho ((t_+t<=tl-to|tl < 0)&(0<=t_+t&t_+t < maxIM/aM&rv*(t_+t)=rv*(t_+t)&ho=w*aM/2*(t_+t)^2+dhd*(t_+t)|t_+t>=maxIM/aM&rv*(t_+t)=rv*(t_+t)&ho=(dhd+w*maxIM)*(t_+t)-w*maxIM^2/(2*aM))->abs(r-rv*(t_+t))>rp|w*h>w*ho+hp)`});
     hideL('L=={`hp>0`});
     hideL('L=={`w*dhd<=w*dhfM&w*ao<=aM|w*ao<=0`});
     hideL('L=={`w*(ao*t_+dhd)<=w*dhfM&w*ao<=aM|w*ao<=0`});
     hideL('L=={`w=-1|w=1`});
     hideL('L=={`rp>=0`});
     hideL('L=={`rv>=0`});
     hideL('L=={`maxIM=max((0,w*(dhfM-dhd)))`});
     hideR('R=={`abs((-rv)*t_+r-ro)>rp`});
     hideR('R=={`w*(-(ao/2*t_^2+dhd*t_)+h)>w*ho+hp`});
     QE
   )

End.

End.


Lemma "Theorem 4: Use case lemma".

ProgramVariables.
  R w.
  R dhf.
  R dhfM.
  R dhd.
  R ao.
  R h.
  R rv.
  R r.
  R t_.
  R to.
  R tl.
End.

Problem.
  loopInv(w, dhf, dhfM, dhd, r, h) -> (abs(r)>rp|abs(h)>hp)
End.

Tactic "proof Theorem 4: Use case lemma".

implyR('R);
(andL('L)*);
print({`before orL`});
orL('L=={`C(w,dhf,dhd,r,h) | CM(w,dhfM,dhd,r,h)`}); <(
  print({`before inst 0 lower`});
  allL({`0`},'L);
  allL({`0`},'L);
  allL({`0`},'L);
  implyL('L); <(
    print({`Use case 1`});
      hideR('R=={`abs(r)>rp|abs(h)>hp`});
      abbrv({`maxI(w,dhf,dhd)`}, {`maxI`});
      minmax('L=={`max(0,w*(dhf-dhd))`});
      /*minmax(-8.1); todo max('L, "max(0,w*(dhf-dhd))".asTerm) */
      print({`MinMax Lower`});
      QE;
      done
    ,
    print({`Absolute value`});
      smartQE;
      done
  );
  done
  ,
  print({`before inst 0 upper`});
  allL(/*t*/ {`0`},'L);
  allL(/*ro*/ {`0`},'L);
  allL(/*ho*/ {`0`},'L);
  implyL('L); <(
    print({`Use case 1`});
      hideR('R=={`abs(r)>rp|abs(h)>hp`});
      abbrv({`maxI(w,dhfM,dhd)`}, {`maxIM`});
      minmax(-8.1); /* todo max('L, "max(0,w*(dhfM-dhd))".asTerm) */
      print({`MinMax Upper`});
      QE
    ,
    print({`Absolute value`});
      smartQE;
      done
  )
)
End.

End.


Theorem "Theorem 4: Main".

ProgramVariables.
  /** Variables **/
   /* horizontal */
  R r.    /* relative distance in ft; xi - xo */
          /* x = r */
  R rv.   /* relative speed -(vi - vo) */
   /* vertical */
  R h.    /* relative altitude in ft */
          /* if negative: the intruder is lower than the ownship */
          /* h := hi - ho */
          /* z = h */
  R dhd.  /* vertical velocity of ownship */
  R dhf.  /* target minimum velocity */
  R dhfM. /* target maximum velocity (soft bound) */
  R w.    /* velocity bound 1 = lower, -1 = upper */
  R ao.   /* vertical acceleration of ownship */
  /** Constants **/
  R hp.   /* puck height */
  R rp.   /* puck radius */
  R a.    /* minimal vertical acceleration. Typically g/4 */
  R aM.   /* maximal vertical acceleration. Typically g/2 or g/3 */
  R tl.   /* time during which advisory needs to be followed */
  R to.   /* time passed since last advisory */

  R t.
  R ro.
  R ho.
End.

Problem.
  (hp > 0 & rp >= 0 & rv >= 0 & a > 0 & aM > 0) /* maybe aM>=a? */ &
  ( ((w=-1 | w=1) & (to<=tl | tl<0)) &
    (
      (
        \forall t \forall ro \forall ho
        ((t<=tl-to | tl<0) &
         ((0 <= t & t < max(0, w * (dhf - dhd)) / a &
           ro = rv * t & ho = (w * a) / 2 * t^2 + dhd * t) |
          (t >= max(0, w * (dhf - dhd)) / a &
           ro = rv * t & ho = dhf * t - w * max(0, w * (dhf - dhd))^2 / (2*a)))
         -> (abs(r - ro) > rp | w * h < w * ho - hp))
      ) |
      (
        \forall t \forall ro \forall ho
        ((t<=tl-to | tl<0) &
         ((0 <= t & t < max(0, w * (dhfM - dhd)) / aM &
           ro = rv * t & ho = (w * aM) / 2 * t^2 + dhd * t) |
          (t >= max(0, w * (dhfM - dhd)) / aM &
           ro = rv * t & ho = (dhd + w * max(0, w * (dhfM-dhd))) * t - w * max(0, w * (dhfM - dhd))^2 / (2*aM)))
         -> (abs(r - ro) > rp | w * h > w * ho + hp))
      )
    )
  )
  -> [
  {   {
      { ?true; ++
        { to:=0; dhf :=*; dhfM :=*; {w:=-1; ++ w:=1;}
         ?(
      (
        \forall t \forall ro \forall ho
        ((t<=tl-to | tl<0) &
         ((0 <= t & t < max(0, w * (dhf - dhd)) / a &
           ro = rv * t & ho = (w * a) / 2 * t^2 + dhd * t) |
          (t >= max(0, w * (dhf - dhd)) / a &
           ro = rv * t & ho = dhf * t - w * max(0, w * (dhf - dhd))^2 / (2*a)))
         -> (abs(r - ro) > rp | w * h < w * ho - hp))
      ) |
      (
        \forall t \forall ro \forall ho
        ((t<=tl-to | tl<0) &
         ((0 <= t & t < max(0, w * (dhfM - dhd)) / aM &
           ro = rv * t & ho = (w * aM) / 2 * t^2 + dhd * t) |
          (t >= max(0, w * (dhfM - dhd)) / aM &
           ro = rv * t & ho = (dhd + w * max(0, w * (dhfM-dhd))) * t - w * max(0, w * (dhfM - dhd))^2 / (2*aM)))
         -> (abs(r - ro) > rp | w * h > w * ho + hp))
      )   );
        } }
        ao :=*;
      }
      {r' = -rv, h' = -dhd, dhd' = ao, to'=1 &
       (to<=tl | tl<0) &
       (( w * dhd >= w * dhf  | w * ao >= a ) &
        ((w * dhd <= w * dhfM & w * ao <= aM) | w * ao <= 0)) }
   }*
  ] ( (abs(r) > rp | abs(h) > hp) &
      ( ((w=-1 | w=1) & (to<=tl | tl<0)) &
        (
      (
        \forall t \forall ro \forall ho
        ((t<=tl-to | tl<0) &
         ((0 <= t & t < max(0, w * (dhf - dhd)) / a &
           ro = rv * t & ho = (w * a) / 2 * t^2 + dhd * t) |
          (t >= max(0, w * (dhf - dhd)) / a &
           ro = rv * t & ho = dhf * t - w * max(0, w * (dhf - dhd))^2 / (2*a)))
         -> (abs(r - ro) > rp | w * h < w * ho - hp))
      ) |
      (
        \forall t \forall ro \forall ho
        ((t<=tl-to | tl<0) &
         ((0 <= t & t < max(0, w * (dhfM - dhd)) / aM &
           ro = rv * t & ho = (w * aM) / 2 * t^2 + dhd * t) |
          (t >= max(0, w * (dhfM - dhd)) / aM &
           ro = rv * t & ho = (dhd + w * max(0, w * (dhfM-dhd))) * t - w * max(0, w * (dhfM - dhd))^2 / (2*aM)))
         -> (abs(r - ro) > rp | w * h > w * ho + hp))
      )
        )
      )
    )
End.

Tactic "prove Theorem 4: Main".

implyR('R); andL('L);
  loop({`loopInv(w, dhf, dhfM, dhd, r, h)`},'R)
  <(
    /*initCase*/
    print({`Base Case`});
      prop;
      done;
      print({`Base Case Done`})
    ,
    /*use*/
    print({`Use case`});
      hideL('L=={`hp>0`});
      hideL('L=={`rp>=0`});
      hideL('L=={`rv>=0`});
      hideL('L=={`a>0`});
      hideL('L=={`aM>0`});
      andR('R); <(
        useLemma({`Theorem 4: Use case lemma`}, {`prop`});
        print({`here, after use lemma`}); done
        ,
        andL('L);
        hideL('L=={`(hp()>0&rp()>=0&rv>=0)&a()>0&aM()>0`});
        andL('L); andL('L);
        andR('R); <(
          prop
          ,
          hideL('L=={`w=-1|w=1`});
          hideL('L=={`to<=tl|tl < 0`});
          prop
        )
      );
      done
    ,
    /*step*/
    print({`Step`});
      andL('L);
      hideL('L=={`(hp()>0&rp()>=0&rv>=0)&a()>0&aM()>0`});
      composeb('R);
      MR({`loopInv(w, dhf, dhfM, dhd, r, h)`},1);
      <(
        print({`Generalization Holds`});
        print({`1.21`}); chase('R); print({`After chase`});
        ((fullSimplify; andL('L)*)*); print({`Simplified`});
        allR('R); allR('R);
        andR('R);
        <(
          implyR('R);
          hideL('L=={`\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhf_0-dhd)))/a()&ro=rv*t&ho=w*a()/2*t^2+dhd*t|t>=max((0,w*(dhf_0-dhd)))/a()&ro=rv*t&ho=dhf_0*t-w*max((0,w*(dhf_0-dhd)))^2/(2*a()))->abs(r-ro)>rp()|w*h < w*ho-hp())|\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhfM_0-dhd)))/aM()&ro=rv*t&ho=w*aM()/2*t^2+dhd*t|t>=max((0,w*(dhfM_0-dhd)))/aM()&ro=rv*t&ho=(dhd+w*max((0,w*(dhfM_0-dhd))))*t-w*max((0,w*(dhfM_0-dhd)))^2/(2*aM()))->abs(r-ro)>rp()|w*h>w*ho+hp())`});
          allR('R); QE
          ,
          implyR('R);
          hideL('L=={`\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhf_0-dhd)))/a()&ro=rv*t&ho=w*a()/2*t^2+dhd*t|t>=max((0,w*(dhf_0-dhd)))/a()&ro=rv*t&ho=dhf_0*t-w*max((0,w*(dhf_0-dhd)))^2/(2*a()))->abs(r-ro)>rp()|w*h < w*ho-hp())|\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhfM_0-dhd)))/aM()&ro=rv*t&ho=w*aM()/2*t^2+dhd*t|t>=max((0,w*(dhfM_0-dhd)))/aM()&ro=rv*t&ho=(dhd+w*max((0,w*(dhfM_0-dhd))))*t-w*max((0,w*(dhfM_0-dhd)))^2/(2*aM()))->abs(r-ro)>rp()|w*h>w*ho+hp())`});
          allR('R); QE
         )
        ,
        print({`Generalization Strong Enough`});
        cut({`!evolutionDomain(w,dhf,dhfM,dhd,ao) | evolutionDomain(w,dhf,dhfM,dhd,ao)`});
        <(
          orL('L=={`!evolutionDomain(w,dhf,dhfM,dhd,ao) | evolutionDomain(w,dhf,dhfM,dhd,ao)`});
          <(
            print({`Not evolutionDomain`});
              hideL('L=={`((w=-1|w=1)&(to<=tl|tl < 0)&(\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhf-dhd)))/a()&ro=rv*t&ho=w*a()/2*t^2+dhd*t|t>=max((0,w*(dhf-dhd)))/a()&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-dhd)))^2/(2*a()))->abs(r-ro)>rp()|w*h < w*ho-hp())|\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t <          max((0,w*(dhfM-dhd)))/aM()&ro=rv*t&ho=w*aM()/2*t^2+dhd*t|t>=max((0,w*(dhfM-dhd)))/aM()&ro=rv*t&ho=(dhd+w*max((0,w*(dhfM-dhd))))*t-w*max((0,w*(dhfM-dhd)))^2/(2*aM()))->abs(r-ro)>rp()|w*h>w*ho+hp())))&(hp()>0&rp()>=0&rv>=0)&a()>0&aM()>0`});
              DI('R); notL('L); prop; done
            ,
            print({`evolutionDomain`});
              print({`Before diff. solution`});
              /* LITTLE FINICKY HERE
              abbrv({`max(0,w*(dhf-dhd))`}, {`maxI`});
              abbrv({`max(0,w*(dhfM-dhd))`}, {`maxIM`});
              */
              solveEnd('R);
              print({`Diff. Solution`}); allR('R); implyR('R); implyR('R); (andL('L)*); print({`Now what?`}); fullSimplify; print({`Simplified 2`});
              orR('R);
              hideL('L=={`to<=tl|tl < 0`});
              orL('L=={`\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max(0,w*(dhf-dhd))/a&ro=rv*t&ho=w*a/2*t^2+dhd*t|t>=max(0,w*(dhf-dhd))/a&ro=rv*t&ho=dhf*t-w*max(0,w*(dhf-dhd))^2/(2*a))->abs(r-ro)>rp|w*h < w*ho-hp)|\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max(0,w*(dhfM-dhd))/aM&ro=rv*t&ho=w*aM/2*t^2+dhd*t|t>=max(0,w*(dhfM-dhd))/aM&ro=rv*t&ho=(dhd+w*max(0,w*(dhfM-dhd)))*t-w*max(0,w*(dhfM-dhd))^2/(2*aM))->abs(r-ro)>rp|w*h>w*ho+hp)`});
              <(
                print({`Before hide lower`});
                  hideL('L=={`aM>0`});
                  hideL('L=={`w*dhd<=w*dhfM&w*ao<=aM|w*ao<=0`});
                  hideL('L=={`w*(ao*t_+dhd)<=w*dhfM&w*ao<=aM|w*ao<=0`});
                  hideR('R=={`\forall t \forall ro \forall ho ((t<=tl-(t_+to)|tl < 0)&(0<=t&t < max(0,w*(dhfM-(ao*t_+dhd)))/aM&ro=rv*t&ho=w*aM/2*t^2+(ao*t_+dhd)*t|t>=max(0,w*(dhfM-(ao*t_+dhd)))/aM&ro=rv*t&ho=(ao*t_+dhd+w*max(0,w*(dhfM-(ao*t_+dhd))))*t-w*max(0,w*(dhfM-(ao*t_+dhd)))^2/(2*aM))->abs((-rv)*t_+r-ro)>rp|w*(-(ao/2*t_^2+dhd*t_)+h)>w*ho+hp)`});
                  print({`lower lemma`});
                  useLemma({`Theorem 4: Correctness of lower bound`}, {`prop`});
                  print({`After prop lower`}); done
                ,
                print({`Before hide upper`});
                  hideL('L=={`a>0`});
                  hideL('L=={`w*dhd>=w*dhf|w*ao>=a`});
                  hideL('L=={`w*(ao*t_+dhd)>=w*dhf|w*ao>=a`});
                  hideR('R=={`\forall t \forall ro \forall ho ((t<=tl-(t_+to)|tl < 0)&(0<=t&t < max(0,w*(dhf-(ao*t_+dhd)))/a&ro=rv*t&ho=w*a/2*t^2+(ao*t_+dhd)*t|t>=max(0,w*(dhf-(ao*t_+dhd)))/a&ro=rv*t&ho=dhf*t-w*max(0,w*(dhf-(ao*t_+dhd)))^2/(2*a))->abs((-rv)*t_+r-ro)>rp|w*(-(ao/2*t_^2+dhd*t_)+h) < w*ho-hp)`});
                  print({`upper lemma`});
                  useLemma({`Theorem 4: Correctness of upper bound`}, {`prop`});
                  print({`After prop upper`}); done
              )
            )
          ,
          print({`Print CUT`});
            hideR('R=={`[{r'=-rv,h'=-dhd,dhd'=ao,to'=1&(to<=tl|tl < 0)&(w*dhd>=w*dhf|w*ao>=a())&(w*dhd<=w*dhfM&w*ao<=aM()|w*ao<=0)}](((w=-1|w=1)&(to<=tl|tl < 0)&(\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhf-dhd)))/a()&ro=rv*t&ho=w*a()/2*t^2+dhd*t|t>=max((0,w*(dhf-dhd)))/a()&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-dhd)))^2/(2*a()))->abs(r-ro)>rp()|w*h < w*ho-hp())|\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhfM-dhd)))/aM()&ro=rv*t&ho=w*aM()/2*t^2+dhd*t|t>=max((0,w*(dhfM-dhd)))/aM()&ro=rv*t&ho=(dhd+w*max((0,w*(dhfM-dhd))))*t-w*max((0,w*(dhfM-dhd)))^2/(2*aM()))->abs(r-ro)>rp()|w*h>w*ho+hp())))&(hp()>0&rp()>=0&rv>=0)&a()>0&aM()>0)`});
            hideL('L=={`hp()>0&rp()>=0&rv>=0&a()>0&aM()>0`});
            hideL('L=={`((w=-1|w=1)&(to<=tl|tl < 0)&(\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhf-dhd)))/a()&ro=rv*t&ho=w*a()/2*t^2+dhd*t|t>=max((0,w*(dhf-dhd)))/a()&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-dhd)))^2/(2*a()))->abs(r-ro)>rp()|w*h < w*ho-hp())|\forall t \forall ro \forall ho ((t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhfM-dhd)))/aM()&ro=rv*t&ho=w*aM()/2*t^2+dhd*t|t>=max((0,w*(dhfM-dhd)))/aM()&ro=rv*t&ho=(dhd+w*max((0,w*(dhfM-dhd))))*t-w*max((0,w*(dhfM-dhd)))^2/(2*aM()))->abs(r-ro)>rp()|w*h>w*ho+hp())))&(hp()>0&rp()>=0&rv>=0)&a()>0&aM()>0`});
            prop
        )
       )
   )

End.

/* defining variables as constant created problems */
Theorem "Lemma 4a: time-limited implicit-explicit lower equivalence".

ProgramVariables.
  /** Variables **/
   /* horizontal */
  R r.    /* relative distance in ft; xi - xo */
          /* x = r */
  R rv.   /* relative speed -(vi - vo) */
   /* vertical */
  R h.    /* relative altitude in ft */
          /* if negative: the intruder is lower than the ownship */
          /* h := hi - ho */
          /* z = h */
  R dhd.  /* vertical velocity of ownship */
  R dhf.  /* target minimum velocity */
  R dhfM. /* target maximum velocity (soft bound) */
  R w.    /* velocity bound 1 = lower, -1 = upper */
  R ao.   /* vertical acceleration of ownship */
  /** Constants **/
  R hp.   /* puck height */
  R rp.   /* puck radius */
  R a.    /* minimal vertical acceleration. Typically g/4 */
  R aM.   /* maximal vertical acceleration. Typically g/2 or g/3 */
  R tl.   /* time during which advisory needs to be followed */
  R to.   /* time passed since last advisory */

  R t.
  R ro.
  R ho.

  R t_. /*added variable*/

End.

Problem.
((hp > 0 & rp >= 0 & rv >= 0 & a > 0) & (w=-1 | w=1)) -> (
(
  (tl-to<0 & tl >= 0)|
  (((w * dhf >= 0) ->
    ((((-rp <= r) & (r  <  -rp - rv * min(0, w * dhd) / a)) &
     (r <= - rp + rv*(tl-to) | tl < 0)) ->
        (w * rv^2 * (h) < a / 2 * (r + rp)^2 +
                           w * rv * dhd * (r + rp) - rv^2 * hp))
    &
    ((((-rp - rv * min(0, w * dhd) / a <= r) &
      (r <= rp - rv * min(0, w * dhd) / a)) &
     (-min(0, w * dhd) /a <= (tl-to) | tl < 0)) ->
        (w * (h)  <  (- min(0, w * dhd)^2) / (2 * a) - hp))
    &
    ((((rp - rv * min(0, w * dhd) / a  <  r) &
      (r <= rp + rv * max(0, w * (dhf - dhd)) / a)) &
     (r <= rp + rv*(tl-to) | tl < 0)) ->
        (w * rv^2 * (h)  <  a / 2 * (r - rp)^2 +
                           w * rv * dhd * (r - rp) - rv^2 * hp))
    &
    (((rp + rv * max(0, w * (dhf - dhd)) / a  <  r) &
     (r <= rp + rv*(tl-to) | tl < 0)) ->
        (rv = 0) |
        (w * rv * (h)  <  w * dhf * (r - rp)
               - rv * max(0, w * (dhf - dhd))^2 / (2 * a) - rv * hp))
  )
  &
  ((w * dhf < 0) ->
    ((((-rp <= r) &
      (r < -rp + rv * max(0, w * (dhf - dhd)) / a)) &
     (r < -rp + rv*(tl-to) | tl < 0)) ->
        (w * rv^2 * (h)  <  a / 2 * (r + rp)^2
                         + w * rv * dhd * (r + rp) - rv^2 * hp))
    &
    (((-rp + rv * max(0, w * (dhf - dhd)) / a  <=  r) &
     (r < -rp + rv*(tl-to) | tl < 0)) ->
        (rv = 0 & r > rp) |
        (w * rv * (h)  <  w * dhf * (r + rp)
               - rv * max(0, w * (dhf - dhd))^2 / (2 * a) - rv * hp))
    &
    ((((-rp + rv*(tl-to) <= r) &
      (r <= rp + rv*(tl-to))) & (tl >= 0)) ->
     (tl-to<0|(0<=tl-to)&
     ((tl-to) <= max(0, w*(dhf - dhd))/a)&
      (w*h  <  a/2*(tl-to)^2 + w*dhd*(tl-to) - hp)|
     ((tl-to) >  max(0, w*(dhf - dhd))/a)&
      (w*h  <  w*dhf*(tl-to) - max(0, w*(dhf - dhd))^2/(2*a) - hp))
    )))
) <->
(

 \forall t \forall ro \forall ho
 ((t<=tl-to | tl<0) &
  ((0 <= t & t < max(0, w * (dhf - dhd)) / a &
    ro = rv * t & ho = (w * a) / 2 * t^2 + dhd * t) |
   (t >= max(0, w * (dhf - dhd)) / a &
    ro = rv * t & ho = dhf * t - w * max(0, w * (dhf - dhd))^2 / (2*a)))
  -> (abs(r - ro) > rp | w * h < w * ho - hp))

))

End.

Tactic "prove Lemma 4a: time-limited implicit-explicit lower equivalence".

implyR('R); equivR('R);
<(
  print({`Case ->`});
    allR('R)*; print({`Afte Case -> skolemize`}); implyR('R);
    andL('L=={`(t<=tl-to|tl < 0)&(0<=t&t < max((0,w*(dhf-dhd)))/a&ro=rv*t&ho=w*a/2*t^2+dhd*t|t>=max((0,w*(dhf-dhd)))/a&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-dhd)))^2/(2*a))`});
    orL('L=={`tl-to < 0&tl>=0|(w*dhf>=0->((-rp<=r&r < -rp-rv*min((0,w*dhd))/a)&(r<=-rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp)&((-rp-rv*min((0,w*dhd))/a<=r&r<=rp-rv*min((0,w*dhd))/a)&(-min((0,w*dhd))/a<=tl-to|tl < 0)->w*h < (-min((0,w*dhd))^2)/(2*a)-hp)&((rp-rv*min((0,w*dhd))/a < r&r<=rp+rv*max((0,w*(dhf-dhd)))/a)&(r<=rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r-rp)^2+w*rv*dhd*(r-rp)-rv^2*hp)&(rp+rv*max((0,w*(dhf-dhd)))/a < r&(r<=rp+rv*(tl-to)|tl < 0)->rv=0|w*rv*h < w*dhf*(r-rp)-rv*max((0,w*(dhf-dhd)))^2/(2*a)-rv*hp))&(w*dhf < 0->((-rp<=r&r < -rp+rv*max((0,w*(dhf-dhd)))/a)&(r < -rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp)&(-rp+rv*max((0,w*(dhf-dhd)))/a<=r&(r < -rp+rv*(tl-to)|tl < 0)->rv=0&r>rp|w*rv*h < w*dhf*(r+rp)-rv*max((0,w*(dhf-dhd)))^2/(2*a)-rv*hp)&((-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&tl>=0->tl-to<0|0<=tl-to&tl-to<=max((0,w*(dhf-dhd)))/a&w*h < a/2*(tl-to)^2+w*dhd*(tl-to)-hp|tl-to>max((0,w*(dhf-dhd)))/a&w*h < w*dhf*(tl-to)-max((0,w*(dhf-dhd)))^2/(2*a)-hp))`});
    <(
      print({`-> : tl-to < 0&tl>0`});
      /*ACASX_Bounded_Case_Imply0*/
      cut({`t <= tl-to | tl < 0`});
      <(
        orL('L=={`t <= tl-to | tl < 0`});
        <(
          QE; print({`-> : tl-to < 0&tl>=0 QE`}); done
          ,
          hideL('L=={`0<=t&t < max((0,w*(dhf-dhd)))/a&ro=rv*t&ho=w*a/2*t^2+dhd*t|t>=max((0,w*(dhf-dhd)))/a&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-dhd)))^2/(2*a)`});
          QE; done
        )
        ,
        print({`Show cut`});
          hideL('L=={`0<=t&t < max((0,w*(dhf-dhd)))/a&ro=rv*t&ho=w*a/2*t^2+dhd*t|t>=max((0,w*(dhf-dhd)))/a&ro=rv*t&ho=dhf*t-w*max((0,w*(dhf-dhd)))^2/(2*a)`});
          hideL('L=={`(hp>0&rp>=0&rv>=0&a>0)&(w=-1|w=1)`});
          hideL('L=={`tl-to < 0&tl>=0`});
          QE; done
      )
      ,
      print({`-> unlimited-time lower equiv`});
      cut({`w*dhf>=0 | w*dhf<0`});
      <(
        orL('L=={`w*dhf>=0 | w*dhf<0`});
        <(
          print({`Case w*dhf>=0`});
            andL('L)*;
            abbrv({`max((0,w*(dhf-dhd)))`}, {`maxA`});
            abbrv({`min((0,w*dhd))`}, {`minA`});
            minmax('L=={`max(0,w*(dhf-dhd))`});
            minmax('L=={`min(0,w*dhd)`});
            absExp('R=={`abs(r-ro)`});
            hideL('L=={`w*dhf < 0->((-rp<=r&r < -rp+rv*maxA/a)&(r < -rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp)&(-rp+rv*maxA/a<=r&(r < -rp+rv*(tl-to)|tl < 0)->rv=0&r>rp|w*rv*h < w*dhf*(r+rp)-rv*maxA^2/(2*a)-rv*hp)&((-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&tl>=0->tl-to < 0|0<=tl-to&tl-to<=maxA/a&w*h < a/2*(tl-to)^2+w*dhd*(tl-to)-hp|tl-to>maxA/a&w*h < w*dhf*(tl-to)-maxA^2/(2*a)-hp)`});
            implyL('L=={`w*dhf>=0->((-rp<=r&r < -rp-rv*minA/a)&(r<=-rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp)&((-rp-rv*minA/a<=r&r<=rp-rv*minA/a)&(-minA/a<=tl-to|tl < 0)->w*h < (-minA^2)/(2*a)-hp)&((rp-rv*minA/a < r&r<=rp+rv*maxA/a)&(r<=rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r-rp)^2+w*rv*dhd*(r-rp)-rv^2*hp)&(rp+rv*maxA/a < r&(r<=rp+rv*(tl-to)|tl < 0)->rv=0|w*rv*h < w*dhf*(r-rp)-rv*maxA^2/(2*a)-rv*hp)`});
            <(
              QE
              ,
              cut({`r < -rp | -rp<=r&r < -rp-rv*minA/a | -rp-rv*minA/a<=r&r<=rp-rv*minA/a | rp-rv*minA/a < r&r<=rp+rv*maxA/a | rp+rv*maxA/a < r`});
              <(
                orL('L=={`r < -rp | -rp<=r&r < -rp-rv*minA/a | -rp-rv*minA/a<=r&r<=rp-rv*minA/a | rp-rv*minA/a < r&r<=rp+rv*maxA/a | rp+rv*maxA/a < r`});
                <(
                  print({`-> 0:r<- rp`});
                    hideL('L=={`((-rp<=r&r < -rp-rv*minA/a)&(r<=-rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp)&((-rp-rv*minA/a<=r&r<=rp-rv*minA/a)&(-minA/a<=tl-to|tl < 0)->w*h < (-minA^2)/(2*a)-hp)&((rp-rv*minA/a < r&r<=rp+rv*maxA/a)&(r<=rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r-rp)^2+w*rv*dhd*(r-rp)-rv^2*hp)&(rp+rv*maxA/a < r&(r<=rp+rv*(tl-to)|tl < 0)->rv=0|w*rv*h < w*dhf*(r-rp)-rv*maxA^2/(2*a)-rv*hp)`});
                    QE
                  ,
                  orL('L=={`-rp<=r&r < -rp-rv*minA/a|-rp-rv*minA/a<=r&r<=rp-rv*minA/a|rp-rv*minA/a < r&r<=rp+rv*maxA/a|rp+rv*maxA/a < r`});
                  <(
                    print({`-> 1:(-rp<=r & r < -rp-rv*minA/a)`});
                      andL('L)*;
                      hideL('L=={`(-rp-rv*minA/a<=r&r<=rp-rv*minA/a)&(-minA/a<=tl-to|tl < 0)->w*h < (-minA^2)/(2*a)-hp`});
                      hideL('L=={`(rp-rv*minA/a < r&r<=rp+rv*maxA/a)&(r<=rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r-rp)^2+w*rv*dhd*(r-rp)-rv^2*hp`});
                      hideL('L=={`rp+rv*maxA/a < r&(r<=rp+rv*(tl-to)|tl < 0)->rv=0|w*rv*h < w*dhf*(r-rp)-rv*maxA^2/(2*a)-rv*hp`});
                      implyL('L=={`(-rp<=r&r < -rp-rv*minA/a)&(r<=-rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp`});
                      <(
                        doall(orL('L))*; doall(print({`-> 1:(-rp<=r & r < -rp-rv*minA/a) QE`}) & QE)
                        ,
                        doall(orL('L))*; doall(print({`-> 1:(-rp<=r & r < -rp-rv*minA/a) QE`}) & QE)
                      )
                    ,
                    orL('L=={`-rp-rv*minA/a<=r&r<=rp-rv*minA/a|rp-rv*minA/a < r&r<=rp+rv*maxA/a|rp+rv*maxA/a < r`});
                    <(
                      print({`-> 2: -rp-rv*minA/a<=r&r<=rp-rv*minA/a`}); /*PROBLEMATIC*/
                        andL('L)*;
                        hideL('L=={`(-rp<=r&r < -rp-rv*minA/a)&(r<=-rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp`});
                        hideL('L=={`(rp-rv*minA/a < r&r<=rp+rv*maxA/a)&(r<=rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r-rp)^2+w*rv*dhd*(r-rp)-rv^2*hp`});
                        hideL('L=={`rp+rv*maxA/a < r&(r<=rp+rv*(tl-to)|tl < 0)->rv=0|w*rv*h < w*dhf*(r-rp)-rv*maxA^2/(2*a)-rv*hp`});
                        implyL('L=={`(-rp-rv*minA/a<=r&r<=rp-rv*minA/a)&(-minA/a<=tl-to|tl < 0)->w*h < (-minA^2)/(2*a)-hp`});
                        <(
                          doall(orL('L))*; doall(print({`-> 2 QE`}) & QE)
                          ,
                          doall(orL('L))*; doall(print({`-> 2 QE`}) & QE)
                        )
                      ,
                      orL('L=={`rp-rv*minA/a < r&r<=rp+rv*maxA/a|rp+rv*maxA/a < r`});
                      <(
                        print({`-> 3: rv*minA/a<=r&r<=rp-rv*minA/`});
                          andL('L)*;
                          doall(orL('L))*; doall(print({`-> 3 QE`}) & QE)
                        ,
                        print({`-> 4: rp+rv*maxA/a < r`});
                          andL('L)*;
                          /*
                          hideL('L=={`(-rp<=r&r < -rp-rv*minA/a)&(r<=-rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp`});
                          hideL('L=={`(-rp-rv*minA/a<=r&r<=rp-rv*minA/a)&(-minA/a<=tl-to|tl < 0)->w*h < (-minA^2)/(2*a)-hp`});
                          hideL('L=={`(rp-rv*minA/a < r&r<=rp+rv*maxA/a)&(r<=rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r-rp)^2+w*rv*dhd*(r-rp)-rv^2*hp`});
                          hideL('L=={`rp+rv*maxA/a < r&(r<=rp+rv*(tl-to)|tl < 0)->rv=0|w*rv*h < w*dhf*(r-rp)-rv*maxA^2/(2*a)-rv*hp`});
                          */
                          doall(orL('L))*; doall(print({`-> 4 QE`}) & QE)
                      )
                    )
                  )
                )
              )
                ,
            )
            ,
            print({`w*dhf<0`});
              andL('L)*;
              abbrv({`max((0,w*(dhf-dhd)))`}, {`maxA`});
              minmax('L=={`max(0,w*(dhf-dhd))`});
              absExp('R=={`abs(r-ro)`});
              hideL('L=={`w*dhf>=0->((-rp<=r&r < -rp-rv*min((0,w*dhd))/a)&(r<=-rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp)&((-rp-rv*min((0,w*dhd))/a<=r&r<=rp-rv*min((0,w*dhd))/a)&(-min((0,w*dhd))/a<=tl-to|tl < 0)->w*h < (-min((0,w*dhd))^2)/(2*a)-hp)&((rp-rv*min((0,w*dhd))/a < r&r<=rp+rv*maxA/a)&(r<=rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r-rp)^2+w*rv*dhd*(r-rp)-rv^2*hp)&(rp+rv*maxA/a < r&(r<=rp+rv*(tl-to)|tl < 0)->rv=0|w*rv*h < w*dhf*(r-rp)-rv*maxA^2/(2*a)-rv*hp)`});
              implyL('L=={`w*dhf < 0->((-rp<=r&r < -rp+rv*maxA/a)&(r < -rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp)&(-rp+rv*maxA/a<=r&(r < -rp+rv*(tl-to)|tl < 0)->rv=0&r>rp|w*rv*h < w*dhf*(r+rp)-rv*maxA^2/(2*a)-rv*hp)&((-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&tl>=0->tl-to < 0|0<=tl-to&tl-to<=maxA/a&w*h < a/2*(tl-to)^2+w*dhd*(tl-to)-hp|tl-to>maxA/a&w*h < w*dhf*(tl-to)-maxA^2/(2*a)-hp)`});
              <(
                QE
                ,
                andL('L)*;
                cut({`(r< -rp)&(r< -rp+rv*(tl-to)&tl>=0|tl<0) | (-rp<=r&r < -rp+rv*maxA/a)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*maxA/a<=r)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&(tl>=0) | (r>rp+rv*(tl-to))&(tl>=0)`});
                <(
                  orL('L=={`(r< -rp)&(r< -rp+rv*(tl-to)&tl>=0|tl<0) | (-rp<=r&r < -rp+rv*maxA/a)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*maxA/a<=r)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&(tl>=0) | (r>rp+rv*(tl-to))&(tl>=0)`});
                  <(
                    print({`-> 4-5`});
                      doall(orL('L))*; doall(print({`-> 4-5 QE`}) & QE)
                    ,
                    orL('L=={`(-rp<=r&r < -rp+rv*maxA/a)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*maxA/a<=r)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&(tl>=0) | (r>rp+rv*(tl-to))&(tl>=0)`});
                    <(
                      print({`-> 5`});
                        doall(orL('L))*; doall(print({`-> 5 QE`}) & QE)
                      ,
                      orL('L=={`(-rp+rv*maxA/a<=r)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&(tl>=0) | (r>rp+rv*(tl-to))&(tl>=0)`});
                      <(
                        print({`-> 6`});
                          doall(orL('L))*; doall(print({`-> 6 QE`}) & QE)
                        ,
                        orL('L=={`(-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&(tl>=0) | (r>rp+rv*(tl-to))&(tl>=0)`});
                        <(
                          print({`-> 7`});
                            doall(orL('L))*; doall(print({`-> 7 contradiction QE`}) & QE)
                          ,
                          print({`-> 8`});
                            cut({`rp=0 | rp>0`});
                            <(
                              orL('L=={`rp=0 | rp>0`});
                              <(
                                print({`-> 8 Case rp=0`});
                                  orR('R);
                                  hideR('R=={`w*h < w*ho-hp`});
                                  QE
                                ,
                                print({`-> 8 Case rp>0`});
                                  orL('L=={`0<=t&t < maxA/a&ro=rv*t&ho=w*a/2*t^2+dhd*t|t>=maxA/a&ro=rv*t&ho=dhf*t-w*maxA^2/(2*a)`});
                                  <(
                                    ,
                                  )
                              )
                              ,

                            )

                        )
                      )
                    )
                  )
                  ,
                  print({`SHOW CUT`})
                )
                ,

              )
        )
      )
      ,
      print({`SHOW CUT`})
    )
)








/*

          ,
          print({`w*dhf<0`});
          andL('L)*;
          abbrv({`max((0,w*(dhf-dhd)))`}, {`maxA`});
          /*
          max('L, "max(0,w*(dhf-dhd))".asTerm) &
          abs('R, "abs(r-ro)".asTerm) &
          */
          cut({`(r< -rp)&(r< -rp+rv*(tl-to)&tl>=0|tl<0) | (-rp<=r&r < -rp+rv*maxA/a)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*maxA/a<=r)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&(tl>=0) | (r>rp+rv*(tl-to))&(tl>=0)`});
          <(
            orL('L=={`(r< -rp)&(r< -rp+rv*(tl-to)&tl>=0|tl<0) | (-rp<=r&r < -rp+rv*maxA/a)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*maxA/a<=r)&(r< -rp+rv*(tl-to)|tl<0) | (-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&(tl>=0) | (r>rp+rv*(tl-to))&(tl>=0)`});
            <(
              print({`-> 4-5`});
                hideL('L=={`p_()&q_() -> r_()`}); /*(hideL('Llike, "p_()&q_() -> r_()".asFormula)*3)*/
                /*ACASX_Bounded_Case_Imply4to5*/
                QE;
                print({`-> 4-5 QE`});
                done
              ,
              print({`-> 5`});
                hideL('L=={`p_()&q_() -> r_()`}); /*(hideL('Llike, "p_()&q_() -> r_()".asFormula)*2)*/
                /*ACASX_Bounded_Case_Imply5*/
                QE;
                print({`-> 5 QE`});
                done
              ,
              print({`-> 6`});
                hideL('L=={`p_()&q_() -> r_()`}); /*(hideL('Llike, "p_()&q_() -> r_()".asFormula)*2)*/
                /*ACASX_Bounded_Case_Imply6*/
                QE;
                print({`-> 6 QE`});
                done
              ,
              print({`-> 7`});
                hideL('L=={`p_()&q_() -> r_()`}); /*(hideL('Llike, "p_()&q_() -> r_()".asFormula)*2)*/
                /*ACASX_Bounded_Case_Imply7*/
                QE;
                print({`-> 7 contradiction QE`});
                done
              ,
              print({`-> 8`});
                hideL('L=={`p_()&q_() -> r_()`}); /*(hideL('Llike, "p_()&q_() -> r_()".asFormula)*3)*/
                /*ACASX_Bounded_Case_Imply8*/
                cut({`rp=0 | rp>0`});
                <(
                  orL('L=={`rp=0 | rp>0`});
                  <(
                    orR('R); hideR('R=={`w*h < w*ho-hp`}); print({`-> 8 Case rp=0`}); QE
                    ,
                    orL('L=={`0<=t&t < maxA/a&ro=rv*t&ho=w*a/2*t^2+dhd*t|t>=maxA/a&ro=rv*t&ho=dhf*t-w*maxA^2/(2*a)`}); print({`-> 8 Case rp>0`}); QE
                  )
                  ,
                  print({`Show cut`})
                )
            )
          )
        )
        ,
        print({`Show cut`});
          hideL('L=={`(w*dhf>=0->((-rp<=r&r < -rp-rv*min((0,w*dhd))/a)&(r<=-rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp)&((-rp-rv*min((0,w*dhd))/a<=r&r<=rp-rv*min((0,w*dhd))/a)&(-min((0,w*dhd))/a<=tl-to|tl < 0)->w*h < (-min((0,w*dhd))^2)/(2*a)-hp)&((rp-rv*min((0,w*dhd))/a < r&r<=rp+rv*max((0,w*(dhf-dhd)))/a)&(r<=rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r-rp)^2+w*rv*dhd*(r-rp)-rv^2*hp)&(rp+rv*max((0,w*(dhf-dhd)))/a < r&(r<=rp+rv*(tl-to)|tl < 0)->rv=0|w*rv*h < w*dhf*(r-rp)-rv*max((0,w*(dhf-dhd)))^2/(2*a)-rv*hp))&(w*dhf < 0->((-rp<=r&r < -rp+rv*max((0,w*(dhf-dhd)))/a)&(r < -rp+rv*(tl-to)|tl < 0)->w*rv^2*h < a/2*(r+rp)^2+w*rv*dhd*(r+rp)-rv^2*hp)&(-rp+rv*max((0,w*(dhf-dhd)))/a<=r&(r < -rp+rv*(tl-to)|tl < 0)->rv=0&r>rp|w*rv*h < w*dhf*(r+rp)-rv*max((0,w*(dhf-dhd)))^2/(2*a)-rv*hp)&((-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to))&tl>=0->tl-to < 0|0<=tl-to&tl-to<=max((0,w*(dhf-dhd)))/a&w*h < a/2*(tl-to)^2+w*dhd*(tl-to)-hp|tl-to>max((0,w*(dhf-dhd)))/a&w*h < w*dhf*(tl-to)-max((0,w*(dhf-dhd)))^2/(2*a)-hp))`});
          QE
      )
    )
  ,
  print({`<-`});
  cut({`tl<0 | tl>=0`});
  <(
    orL('L=={`tl<0 | tl>=0`});
    <(
      print({`tl<0`});
      print({`<- unlimited time lower equiv`});
        /*ACASX_Bounded_TimeLowerA*/
        /*lweqvA*/
      ,
      print({`tl>=0`});
      cut({`tl-to<0 | tl-to>=0`});
      <(
        orL('L=={`tl-to<0 | tl-to>=0`});
        <(
          print({`tl>=0 Case tl-to<0`});
            QE
          ,
          print({`tl>=0 Case tl-to>=0`});
            /*ACASX_Bounded_TimeLowerB*/
            /*lweqvA*/
        )
        ,
        print({`Show cut`});
      )
    )
    ,
    print({`Show cut`});
  )

)

End.


/* Below is the old tactic from the old proof. Update in progress.

  dT("<-") & Idioms.cases(QE)(
    (Case("tl<0".asFormula),
      dT("<- unlimited time lower equiv") &
      Idioms.rememberAs("ACASX_Bounded_TimeLowerA", lweqvA(
        ///////////// B
        QE,
        ///////////// S
        Idioms.cases(QE)(
          (Case("(h+w*maxA^2/(2*a))/dhf>=maxA/a".asFormula),
            allTRoHoL("S >= maxA/a", "(h+w*maxA^2/(2*a))/dhf", "0", "h") &
            implyL('L) & Idioms.<(cohideOnlyR('Rlast) & QE, QE)
          ),
          (Case("(h+w*maxA^2/(2*a))/dhf<maxA/a".asFormula),
            allTRoHoL("S < maxA/a", "maxA/a", "0", "dhf*maxA/a-w*maxA^2/(2*a)") &
            implyL('L) & Idioms.<(cohideOnlyR('Rlast) & QE, QE)
          )
        ),
        ///////////// V
        allTRoHoL("<- 6", "(r+rp)/rv", "rv*((r+rp)/rv)", "dhf*((r+rp)/rv)-w*maxA^2/(2*a)") & QE
    ))),
    (Case("tl>=0".asFormula), Idioms.cases(QE)(
      (Case("tl-to<0".asFormula), dT("tl>=0 Case tl-to<0") & QE),
      (Case("tl-to>=0".asFormula),
        dT("tl>=0 Case tl-to>=0") &
          Idioms.rememberAs("ACASX_Bounded_TimeLowerB", lweqvA(
            ///////////// B
            SimplifierV2.fullSimpTac & atomicQE(onAll(implyL('L))*, dT("B QE")),
            ///////////// S
            andR('R) & Idioms.<(
              allTRoHoL("S inst", "-maxA/a", "rv*(-maxA/a)", "dhf*(-max/a)-w*max^2/(2*a)") & QE,
              Idioms.cases(QE)(
                (Case("tl-to > maxA/a".asFormula),
                  allTRoHoL("<- 7: 1", "tl-to", "rv*(tl-to)", "dhf*(tl-to)-w*maxA^2/(2*a)") &
                  SimplifierV2.fullSimpTac & atomicQE(onAll(implyL('L))*, dT("W QE")))
                ,
                (Case("tl-to <= maxA/a".asFormula),
                  allTRoHoL("<- 7: 2", "tl-to", "rv*(tl-to)", "w*a/2*(tl-to)^2+dhd*(tl-to)") &
                  SimplifierV2.fullSimpTac & atomicQE(onAll(implyL('L))*, dT("X QE")))
              )
            ),
            ///////////// V
            (andL('L)*) & SimplifierV2.fullSimpTac & dT("<- V") &
              andR('R) & Idioms.<(
                implyR('R) &
                allTRoHoL("<- 6", "(r+rp)/rv", "rv*((r+rp)/rv)", "dhf*((r+rp)/rv)-w*maxA^2/(2*a)") &
                atomicQE(ArithmeticLibrary.varEliminationLeft("w".asVariable), dT("<- V QE 1")) & done
                ,
                implyR('R) & Idioms.cases(QE)(
                  (Case("tl-to > maxA/a".asFormula),
                    allTRoHoL("<- 7 A", "tl-to", "rv*(tl-to)", "dhf*(tl-to)-w*maxA^2/(2*a)") &
                    atomicQE(ArithmeticLibrary.varEliminationLeft("w".asVariable), dT("<- V QE 2")) & done
                  ),
                  (Case("tl-to <= maxA/a".asFormula),
                    allTRoHoL("<- 7 B", "tl-to", "rv*(tl-to)", "w*a/2*(tl-to)^2+dhd*(tl-to)") &
                    atomicQE(ArithmeticLibrary.varEliminationLeft("w".asVariable), dT("<- V QE 3")) & done)
                )
              )
          ))
      )
    ))
  )
)


def allTRoHoL(caseName: String, tInst: String, roInst: String, hoInst: String): BelleExpr =
  dT(caseName) &
  allL("t".asVariable, tInst.asTerm)('L) &
  allL("ro".asVariable, roInst.asTerm)('L) &
  allL("ho".asVariable, hoInst.asTerm)('L) &
  dT(s"$caseName Inst")



def lweqvA(b:BelleExpr,s:BelleExpr,v:BelleExpr)

abbrv({`max((0,w*(dhf-dhd))`}, {`maxA`});
minmax('L=={`max(0,w*(dhf-dhd))`});
andR('R);
<(
  implyR('R); andR('R);
  <(
    print({`<- 1`}); minmax('R=={`min(0,w*dhd)`}); implyR('R); (andL('L)*); cut({`rv=0 | rv>0`});
    <(
      orL('L={`rv=0 | rv>0`});
      <(
        print({`<- 1:rv=0`});
          /*allTRoHoL("<- 1:rv=0", "0", "rv*0", "w*a/2*0^2+dhd*0") & b*/
          allL( {`0`}, 'L);
          allL( {`rv*0`}, 'L);
          allL( {`w*a/2*0^2+dhd*0`}, 'L);
          /*b*/
        ,
        print({`<- 1:rv>0`});
          /*allTRoHoL("<- 1:rv>0", "(r+rp)/rv", "rv*((r+rp)/rv)", "w*a/2*((r+rp)/rv)^2+dhd*((r+rp)/rv)") & b/*d*/*/
          allL( {`(r+rp)/rv`}, 'L);
          allL( {`rv*((r+rp)/rv)`}, 'L);
          allL( {`w*a/2*((r+rp)/rv)^2+dhd*((r+rp)/rv)`}, 'L);
          /*b*/
      )
      ,
      print({`Show cut`})
    )
    ,
    andR('R);
    <(
      print({`<- 2`});
      abbrv({`min((0,w*dhd))`}, {`minA`});
      minmax('L=={`min((0,w*dhd))`});
      implyR('R); (andL('L)*);
      cut({`rv=0 | rv>0`});
      <(
        orL('L=={`rv=0 | rv>0`});
        <(
          print({`<- 2:rv=0`});
            /*allTRoHoL("<- 2:rv=0", "-minA/a", "rv*(-minA/a)", "w*a/2*(-minA/a)^2+dhd*(-minA/a)") & b*/
            allL( {`-minA/a`}, 'L);
            allL( {`rv*(-minA/a)`}, 'L);
            allL( {`w*a/2*(-minA/a)^2+dhd*(-minA/a)`}, 'L);
            /*b*/
          ,
          print({`<- 2:rv>0`});
            /*allTRoHoL("<- 2:rv>0", "-minA/a", "rv*(-minA/a)", "w*a/2*(-minA/a)^2+dhd*(-minA/a)") & b*/
            allL( {`-minA/a`}, 'L);
            allL( {`rv*(-minA/a)`}, 'L);
            allL( {`w*a/2*(-minA/a)^2+dhd*(-minA/a)`}, 'L);
            /*b*/
        )
        ,
        print({`Show cut`});
      )
      ,
      andR('R);
      <(
        print({`<- 3`}); minmax('R=={`min(0,w*dhd)`}); implyR('R); (andL('L)*);
        cut({`rv=0 | rv>0`});
        <(
          orL('L=={`rv=0 | rv>0`});
          <(
            print({`<- 3:rv=0`});
              /*allTRoHoL("<- 3:rv=0", "0", "rv*0", "w*a/2*0^2+dhd*0") & b*/
              allL( {`0`}, 'L);
              allL( {`rv*0`}, 'L);
              allL( {`w*a/2*0^2+dhd*0`}, 'L);
              /*b*/
            ,
            print({`<- 3:rv>0`});
              /*allTRoHoL("<- 3:rv>0", "(r-rp)/rv", "rv*((r-rp)/rv)", "w*a/2*((r-rp)/rv)^2+dhd*((r-rp)/rv)") & b*/
              allL( {`(r-rp)/rv`}, 'L);
              allL( {`rv*((r-rp)/rv)`}, 'L);
              allL( {`w*a/2*((r-rp)/rv)^2+dhd*((r-rp)/rv)`}, 'L);
              /*b*/
          )
          ,
          print({`Show cut`});
        )
        ,
        print({`<- 4`}); implyR('R); cut({`rv=0 | rv>0`});
        <(
          orL('L=={`rv=0 | rv>0`});
          <(
            print({`<- 4:rv=0`});
              closeTrue;
            ,
            print({`<- 4:rv>0`});
              /*allTRoHoL("<- 4:rv>0", "(r-rp)/rv", "rv*((r-rp)/rv)", "dhf*((r-rp)/rv)-w*maxA^2/(2*a)") & b/*n*/*/
              allL( {`(r-rp)/rv`}, 'L);
              allL( {`rv*((r-rp)/rv)`}, 'L);
              allL( {`dhf*((r-rp)/rv)-w*maxA^2/(2*a)`}, 'L);
              /*b*/
          )
          ,
          print({`Show cut`});
        )
      )
    )
  )
  ,
  implyR('R); andR('R);
  <(
    print({`<- 5`}); implyR('R);
    cut({`rv=0 | rv>0`});
    <(
      orL('L=={`rv=0 | rv>0`});
      <(
        print({`<- 5:rv=0`});
          /*allTRoHoL("<- 5:rv=0", "0", "0", "0") & b*/
          allL( {`0`}, 'L);
          allL( {`0`}, 'L);
          allL( {`0`}, 'L);
          /*b*/
        ,
        print('L=={`<- 5:rv>0`});
          /*allTRoHoL("<- 5:rv>0", "(r+rp)/rv", "rv*((r+rp)/rv)", "w*a/2*((r+rp)/rv)^2+dhd*((r+rp)/rv)") & b*/
          allL( {`(r+rp)/rv`}, 'L);
          allL( {`rv*((r+rp)/rv)`}, 'L);
          allL( {`w*a/2*((r+rp)/rv)^2+dhd*((r+rp)/rv)`}, 'L);
          /*b*/
      )
      ,
      print({`Show cut`});
    )
    ,
    print({`<- 6`});
    cut({`rv=0 | rv>0`});
    <(
      orL('L=={`rv=0 | rv>0`});
      <(
        print({`<- 6:rv=0`});
          cut({`r>rp | r <= rp`});
          <(
            orL('L=={`r>rp | r <= rp`});
            <(
              closeT
              ,
              /*s*/
            )
          )
        ,
        print({`<- 6:rv>0`});
        /*v*/
      )
      ,
      print({`Show cut`});
    )
  )
)

*/

Theorem "Lemma 4b: time-limited implicit-explicit upper equivalence".

ProgramVariables.
  /** Variables **/
   /* horizontal */
  R r.    /* relative distance in ft; xi - xo */
          /* x = r */
  R rv.   /* relative speed -(vi - vo) */
   /* vertical */
  R h.    /* relative altitude in ft */
          /* if negative: the intruder is lower than the ownship */
          /* h := hi - ho */
          /* z = h */
  R dhd.  /* vertical velocity of ownship */
  R dhfM.  /* taMget maximum velocity */
  R w.    /* velocity bound 1 = lower, -1 = upper */
  R ao.   /* vertical acceleration of ownship */
  /** Constants **/
  R hp.   /* puck height */
  R rp.   /* puck radius */
  R aM.   /* maximum vertical acceleration. Typically g/3 or g/2 */
  R to.
  R tl.

  R t.
  R ro.
  R ho.
End.

Problem.
  (
   (w * (dhd + w * max(0, w * (dhfM - dhd))) > 0 ->
    (
     ((-rp <= r & r <= rp) -> w * h > hp)
     &
     ((rp < r & r <= rp + rv * max(0, w*(dhfM - dhd))/aM & (r <= rp + rv * (tl-to) | tl < 0))  ->
      (w * rv^2 * h > aM/2 * (r - rp)^2 + w * rv * dhd * (r - rp) + rv^2 * hp))
     &
     ((-rp <= r & r < -rp + rv * max(0, w*(dhfM - dhd))/aM  & (r <= -rp + rv * (tl-to) | tl < 0)) ->
      (w * rv^2 * h > aM/2 * (r + rp)^2 + w * rv * dhd * (r + rp) + rv^2 * hp))
     &
     ((-rp + rv * max(0, w*(dhfM - dhd))/aM <= r & (r < -rp + rv*(tl-to) | tl<0)) ->
      ((rv = 0 & r > rp) |
       w * rv * h > w * (dhd + w * max(0, w * (dhfM - dhd))) * (r + rp) - rv * max(0, w*(dhfM - dhd))^2 / (2*aM) + rv*hp))
     &
     ((-rp + rv*(tl-to) <= r & r<= rp + rv*(tl-to))->
      (tl < 0 |
       (
        (rv = 0 & r > rp) |
        ((max(0, w*(dhfM - dhd))/aM <= (tl-to) -> w * h > w * (dhd + w * max(0, w * (dhfM - dhd))) * (tl-to) - max(0, w*(dhfM - dhd))^2 / (2*aM)  + hp)
        &
        (max(0, w*(dhfM - dhd))/aM > (tl-to) -> w * h > aM/2 * (tl-to)^2 + w * dhd * (tl-to) + hp))
       ))
     )
     ))
    &
    ((w * (dhd + w * max(0, w * (dhfM - dhd))) <= 0) ->
      ((-rp <= r & r <= rp) -> w * h > hp)
      &
      ((rp < r & r <= rp + rv * max(0, w*(dhfM - dhd))/aM & (r <= rp + rv * (tl-to) | tl < 0)) ->
        w * rv^2 * h > aM/2 * (r - rp)^2 + w * rv * dhd * (r - rp) + rv^2 * hp)
      &
      ((rp + rv * max(0, w*(dhfM - dhd))/aM < r & (r<=rp + rv*(tl-to) | tl < 0)) ->
       (rv = 0 |
        w * rv * h > w * (dhd + w * max(0, w * (dhfM - dhd))) * (r - rp) - rv * max(0, w*(dhfM - dhd))^2 / (2*aM) + rv*hp))
      )
  ) <->
  (
    \forall t \forall ro \forall ho
    ((t<=tl-to | tl<0) &
     ((0 <= t & t < max(0, w * (dhfM - dhd)) / aM &
      ro = rv * t & ho = (w * aM) / 2 * t^2 + dhd * t) |
     (t >= max(0, w * (dhfM - dhd)) / aM &
      ro = rv * t &
      ho = (dhd + w * max(0, w * (dhfM-dhd))) * t
            - w * max(0, w * (dhfM - dhd))^2 / (2*aM)))
     -> (abs(r - ro) > rp | w * h > w * ho + hp))
  )
  )
End.

Tactic "proof Lemma 4b: time-limited implicit-explicit upper equivalence".
  abbrv({`max(0, w*(dhfM - dhd))`}, {`maxAbbrv`});
  cut({`maxAbbrv>=0`});
  <(
    cut({`rv = 0 | rv > 0`});
    <(
      orL('L=={`rv = 0 | rv > 0`});
      <(
        print({`rv = 0`});
          rv0 /* CALLS A FUNCTION rv0()*/
          ,
        print({`rv > 0`});
          rvp /* CALLS A FUNCTION rvp()*/
      )
      ,
      print({`SHOWCUT`});
        QE;
    )
    ,
    print({`SHOWCUT`});
      QE;
  )
End.

End.

/* WORKSPACE, Definitions of functions

def substTactic0(String)

  implyR(1);
  print({`substTactic0`});
  allL( {`(r-rp)/rv`}, 'L);
  allL( {`(r-rp)`}, 'L);
  allL( {`STRING`}, 'L);
  implyL('L);
  <(
    print({`a`});
      andR('R);
      doall(QE);
    ,
    print({`b`});
      hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
      QE;
  )

def substTactic1(string, int)

  print({`substTactic1`});
  allL( {`(r+rp)/rv`}, 'L);
  allL( {`(r+rp)`}, 'L);
  allL( {`STRING`}, 'L);
  implyL('L);
  <(
    print({`__01__`});
      hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
      QE;
    ,
    print({`__02__`});
      orL('L);
      onall(QE);
  )


def tac2()

  implyR(1);
  andR('R);
  <(
    print({`1.1`});
      implyR(1);
      print({`1.1`});
      allL( {`0`}, 'L);
      allL( {`0`}, 'L);
      allL( {`0`}, 'L);
      hideL(-1);
      implyL('L);
      <(
        hideR(1);
        hideL(-3);
        hideL(-3);
        QE
        ,
        hideL(-1);
        hideL(-2);
        QE
      )
    ,
    print({`1.2`});
      andR('R);
      <(
        print({`1.2.1`});
          implyR(1);
          print({`substTactic0`});
          allL( {`(r-rp)/rv`}, 'L);
          allL( {`(r-rp)`}, 'L);
          allL( {`(w * aM) / 2 * (r-rp)^2/rv^2 + dhd * (r-rp)/rv`}, 'L);
          implyL('L);
          <(
            print({`a`});
              andR('R);
              doall(QE);
            ,
            print({`b`});
              hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
              QE;
          )
        ,
        print({`1.2.2`});
          implyR('R);
          orR(1);
          hideR('R=={`rv=0`});
          print({`1.2.2`});
          allL( {`(r-rp)/rv`}, 'L);
          allL( {`(r-rp)`}, 'L);
          allL( {`(dhd+w*maxAbbrv)*(r-rp)/rv-w*maxAbbrv^2/(2*aM)`}, 'L);
          implyL('L);
          <(
            print({` a `});
              hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
              QE
            ,
            print({` b `});
              hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
              QE
          )
      )
  )



def tac1()

  implyR(1);
  andR('R);
  <(
    print({`1.1`});
      implyR(1);
      print({`1.1`});
      allL( {`0`}, 'L);
      allL( {`0`}, 'L);
      allL( {`0`}, 'L);
      hideL(-1);
      implyL('L);
      <(
        hideR(1);
        hideL(-3);
        QE
        ,
        hideL(-1);
        hideL(-2);
        QE
      )
    ,
    print({`1.2`});
      andR('R);
      <(
        print({`1.2.1`});
          implyR(1);
          print({`substTactic0`});
          allL( {`(r-rp)/rv`}, 'L);
          allL( {`(r-rp)`}, 'L);
          allL( {`(w * aM) / 2 * (r-rp)^2/rv^2 + dhd * (r-rp)/rv`}, 'L);
          implyL('L);
          <(
            print({`a`});
              andR('R);
              doall(QE);
            ,
            print({`b`});
              hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
              QE;
          )
        ,
        print({`1.2.2`});
          andR(1);
          <(
            print({`__0__`});
              implyR(1);
              print({`substTactic1`});
              allL( {`(r+rp)/rv`}, 'L);
              allL( {`(r+rp)`}, 'L);
              allL( {`(w * aM) / 2 * (r+rp)^2/rv^2 + dhd * (r+rp)/rv`}, 'L);
              implyL('L);
              <(
                print({`__01__`});
                  hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
                  QE;
                ,
                print({`__02__`});
                  orL('L);
                  onall(QE);
              )
            ,
            print({`__1__`});
              andR('R);
              <(
                print({`x`});
                  implyR('R);
                  orR('R);
                  hideR('R=={`rv=0&r>rp`});
                  print({``});
                  allL( {`(r+rp)/rv`}, 'L);
                  allL( {`(r+rp)`}, 'L);
                  allL( {`(dhd+w*maxAbbrv)*(r+rp)/rv-w*maxAbbrv^2/(2*aM)`}, 'L);
                  implyL('L); onall(print({`a`}); hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`}); QE)
                ,
                print({`y`});
                  implyR('R);
                  orR('R);
                  orR('R);
                  andR('R=={`(maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp)&(maxAbbrv/aM>tl-to->w*h>aM/2*(tl-to)^2+w*dhd*(tl-to)+hp)`});
                  <(
                    print({`T`});
                      print({`T`});
                      allL( {`tl-to`}, 'L);
                      allL( {`rv*(tl-to)`}, 'L);
                      allL( {`(dhd+w*maxAbbrv)*(tl-to)-w*maxAbbrv^2/(2*aM)`}, 'L);
                      implyL('L);
                      <(
                        print({` a `});
                          hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
                          QE
                        ,
                        print({`b`});
                          hideR('R=={`rv=0&r>rp`});
                          implyR('R=={`maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp`});
                          andL('L=={`(hp>0&rp>=0&rv>=0&aM>0)&(w=-1|w=1)&(to<=tl|tl < 0)`});
                          andL('L=={`(w=-1|w=1)&(to<=tl|tl < 0)`});
                          orL('L=={`(to<=tl|tl < 0)`});
                          <(
                            orL('L=={`abs(r-rv*(tl-to))>rp|w*h>w*((dhd+w*maxAbbrv)*(tl-to)-w*maxAbbrv^2/(2*aM))+hp`});
                            <(
                              print({`bug`});
                                QE
                              ,
                              QE
                            )
                            ,
                            QE
                          )
                      )
                    ,
                    print({`TT`});
                      print({`TT`});
                      allL( {`tl-to`}, 'L);
                      allL( {`rv*(tl-to)`}, 'L);
                      allL( {`w*aM/2*(tl-to)^2+dhd*(tl-to)`}, 'L);
                      implyL('L);
                      <(
                        print({` a `});
                          hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
                          QE
                        ,
                        print({` b `});
                          hideR('R=={`rv=0&r>rp`});
                          implyR('R=={`maxAbbrv/aM > (tl-to) -> w * h > aM/2 * (tl-to)^2 + w * dhd * (tl-to) + hp`});
                          andL('L=={`(hp>0&rp>=0&rv>=0&aM>0)&(w=-1|w=1)&(to<=tl|tl < 0)`});
                          andL('L=={`(w=-1|w=1)&(to<=tl|tl < 0)`});
                          orL('L=={`(to<=tl|tl < 0)`});
                          <(
                            orL('L=={`abs(r-rv*(tl-to))>rp|w*h>w*(w*aM/2*(tl-to)^2+dhd*(tl-to))+hp`});
                            <(
                              print({`bug`});
                                QE
                              ,
                              QE
                            )
                            ,
                            QE
                          )
                      )
                  )
              )
          )
      )
  )


def tac1rv0()

  implyR(1);
  andR('R);
  <(
    print({`1.1`});
      print({`1.1`});
      allL( {`0`}, 'L);
      allL( {`0`}, 'L);
      allL( {`0`}, 'L);
      hideL(-1);
      QE
    ,
    print({`1.2`});
      andR('R);
      <(
        print({`A`});
          hideL('L)*;
          QE
        ,
        print({`B`});
          andR('R);
          <(
            print({`X`});
              hideL('L)*;
              QE
            ,
            print({`Y`});
              andR('R);
              <(
                print({`I`});
                  implyR(1);
                  hideL(-1);
                  QE
                ,
                print({`II`});
                  implyR(1);
                  cut({`maxAbbrv > aM*(tl-to) | maxAbbrv <= aM*(tl-to)`});
                  <(
                    orL('L=={`maxAbbrv > aM*(tl-to) | maxAbbrv <= aM*(tl-to)`});
                    <(
                      print({` i `});
                        print({` i `});
                        allL( {`tl-to`}, 'L);
                        allL( {`0`}, 'L);
                        allL( {`w*aM/2*(tl-to)^2+dhd*(tl-to)`}, 'L);
                        andL('L)*;
                        QE /*ATTENTION*/
                      ,
                      print({` ii `});
                        print({` ii `});
                        allL( {`tl-to`}, 'L);
                        allL( {`0`}, 'L);
                        allL( {`(dhd+w*maxAbbrv)*(tl-to)-w*maxAbbrv^2/(2*aM)`}, 'L);
                        andL('L)*;
                        QE
                    )
                    ,
                    print({`SHOWCUT`});
                  )
              )
          )
      )
  )


def tac2rv0()

  implyR(1);
  andR('R);
  <(
    print({`2.1`});
      implyR(1);
        print({`2.1`});
        allL( {`0`}, 'L);
        allL( {`0`}, 'L);
        allL( {`0`}, 'L);
        implyL('L);
        <(
          print({`___0___`});
            hideL(-1);
            QE
          ,
          print({`___1___`});
            hideL(-1);
            QE
        )
    ,
    print({`2.2`});
      andR('R);
      <(
        print({`___0___`});
          hideL('L)*;
          QE
        ,
        print({`___1___`});
          hideL(-1);
          QE
      )
  )


def parabolaInfT()

  (andL('L)*);
  hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
  QE


def nestedcutsQE1()

  cut({`rp < r&r<=rp+rv*maxAbbrv/aM->w*rv^2*h>aM/2*(r-rp)^2+w*rv*dhd*(r-rp)+rv^2*hp`});
  <(

    ,
    print({`SHOWCUT`})
  )


def lineTl()

  andL('L)*;
  hideL('L=={`rp < r&r<=rp+rv*maxAbbrv/aM&(r<=rp+rv*(tl-to)|tl < 0)->w*rv^2*h>aM/2*(r-rp)^2+w*rv*dhd*(r-rp)+rv^2*hp`});
  hideL('L=={`-rp<=r&r < -rp+rv*maxAbbrv/aM&(r<=-rp+rv*(tl-to)|tl < 0)->w*rv^2*h>aM/2*(r+rp)^2+w*rv*dhd*(r+rp)+rv^2*hp`});
  hideL('L=={`o<=tl|tl < 0`});
  hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
  doall(orL('L))*;
  doall(QE)


def parabolaTl()

  hideL('L=={`to<=tl|tl < 0`});
    cut({`aM*(tl-to) < maxAbbrv | aM*(tl-to) >= maxAbbrv`});
    <(
      or('L=={`aM*(tl-to) < maxAbbrv | aM*(tl-to) >= maxAbbrv`});
      <(
        print({`a`});
          implyL('L=={`-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to)->tl < 0|(maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp)&(maxAbbrv/aM>tl-to->w*h>aM/2*(tl-to)^2+w*dhd*(tl-to)+hp)`});
          <(
            print({`hard`});
              hideL('L=={`-rp+rv*maxAbbrv/aM<=r&(r < -rp+rv*(tl-to)|tl < 0)->w*rv*h>w*(dhd+w*maxAbbrv)*(r+rp)-rv*maxAbbrv^2/(2*aM)+rv*hp`});
              hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
              QE /*atomicQE(ArithmeticLibrary.varEliminationLeft("w".asVariable))*/
            ,
            orL('L=={`tl < 0|(maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp)&(maxAbbrv/aM>tl-to->w*h>aM/2*(tl-to)^2+w*dhd*(tl-to)+hp)`});
            <(
              hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
              QE /*atomicQE(ArithmeticLibrary.varEliminationLeft("w".asVariable))*/
              ,
              hideL('L)*;
              hideL('L=={`-rp+rv*maxAbbrv/aM<=r&(r < -rp+rv*(tl-to)|tl < 0)->w*rv*h>w*(dhd+w*maxAbbrv)*(r+rp)-rv*maxAbbrv^2/(2*aM)+rv*hp`});
              hideL('L=={`(maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp)`});
              hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
              QE /*atomicQE(ArithmeticLibrary.varEliminationLeft("w".asVariable))*/
            )
          )
      ,
      print({`b`});
        hideL('L=={`t<=tl-to`});
        implyL('L=={`-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to)->tl < 0|(maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp)&(maxAbbrv/aM>tl-to->w*h>aM/2*(tl-to)^2+w*dhd*(tl-to)+hp)`});
        <(
          print({`hard`});
            nestedcutsQE1();
            print({`hard DONE`})
          ,
          orL('L=={`tl < 0|(maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp)&(maxAbbrv/aM>tl-to->w*h>aM/2*(tl-to)^2+w*dhd*(tl-to)+hp)`});
          <(
            hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
            QE /*atomicQE(ArithmeticLibrary.varEliminationLeft("w".asVariable))*/
            ,
            andL('L)*;
            nestedcutsQE;
            print({`hard 2 DONE`});
          )
        )
    )
    ,
    print({`SHOWCUT`})
  )


def lineInfT()

  andL('L)*;
  QE /*atomicQE(ArithmeticLibrary.varEliminationLeft("w".asVariable))*/


def rvp()

  print({`rv>0`});
  equivR('R);
  <(
    print({`(->)`});
      allR(1);
      allR(1);
      allR(1);
      implyR(1);
      cut({`w*(dhd+w*maxAbbrv)<=0 | w*(dhd+w*maxAbbrv) > 0`});
      <(
        orL('L=={`w*(dhd+w*maxAbbrv)<=0 | w*(dhd+w*maxAbbrv) > 0`});
        <(
          print({`___T1___`});
            andL('L)*;
            orL('L=={`0<=t&t < maxAbbrv/aM&ro=rv*t&ho=w*aM/2*t^2+dhd*t|t>=maxAbbrv/aM&ro=rv*t&ho=(dhd+w*maxAbbrv)*t-w*maxAbbrv^2/(2*aM)`});
            <(
              print({`parabola`});
                hideL('L=={`rp+rv*maxAbbrv/aM < r&(r<=rp+rv*(tl-to)|tl < 0)->w*rv*h>w*(dhd+w*maxAbbrv)*(r-rp)-rv*maxAbbrv^2/(2*aM)+rv*hp`});
                orL('L=={`t<=tl-to|tl < 0`});
                <(
                  print({` i `});
                    hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
                    QE
                  ,
                  print({` i `});
                    hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
                    QE
                )
              ,
              print({`line`});
                orL('L=={`t<=tl-to|tl < 0`});
                <(
                  print({` i `});
                    lineTl
                  ,
                  print({` ii `});
                    hideL('L=={`-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to)->tl < 0|(maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp)&(maxAbbrv/aM>tl-to->w*h>aM/2*(tl-to)^2+w*dhd*(tl-to)+hp)`});
                    hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
                    lineInfT
                )
            )
          ,
          print({`___T2___`});
            andL('L)*;
            orL('L=={`0<=t&t < maxAbbrv/aM&ro=rv*t&ho=w*aM/2*t^2+dhd*t|t>=maxAbbrv/aM&ro=rv*t&ho=(dhd+w*maxAbbrv)*t-w*maxAbbrv^2/(2*aM)`});
            <(
              print({`parabola`});
                orL('L=={`t<=tl-to|tl < 0`});
                <(
                  print({` i `});
                    parabolaTl
                  ,
                  print({` ii `});
                    hideL('L=={`-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to)->tl < 0|(maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp)&(maxAbbrv/aM>tl-to->w*h>aM/2*(tl-to)^2+w*dhd*(tl-to)+hp)`});
                    parabolaInfT
                )
              ,
              print({`line`});
                orL('L=={`t<=tl-to|tl < 0`});
                <(
                  print({` i `});
                    lineTl
                  ,
                  print({` ii `});
                    hideL('L=={`-rp+rv*(tl-to)<=r&r<=rp+rv*(tl-to)->tl < 0|(maxAbbrv/aM<=tl-to->w*h>w*(dhd+w*maxAbbrv)*(tl-to)-maxAbbrv^2/(2*aM)+hp)&(maxAbbrv/aM>tl-to->w*h>aM/2*(tl-to)^2+w*dhd*(tl-to)+hp)`});
                    hideL('L=={`maxAbbrv=max((0,w*(dhfM-dhd)))`});
                    lineInfT
                )
            )
        )
        ,
        print({`SHOWCUT`})
      )
    ,
    print({`(<-)`});
      andR('R);
      <(
        print({`___R1___`});
          tac1
        ,
        print({`___R2___`});
          tac2
      )
  )


def rv0()

  /*exhaustiveEqL2R(hide=true)('L, "rv=0".asFormula)*/
  equivR('R);
  <(
    print({`(->)`});
      allR(1);
      allR(1);
      allR(1);
      implyR(1);
      andL(-4);
      cut({`w*(dhd+w*maxAbbrv)<=0 | w*(dhd+w*maxAbbrv)>0`});
      <(
        orL('L=={`w*(dhd+w*maxAbbrv)<=0 | w*(dhd+w*maxAbbrv)>0`});
        <(
          print({`__R1__`});
            QE
          ,
          print({`__R2__`});
            andL('L)*
            onall(orL('L)*);
            onall(print({`__R2__ QE`}); QE)
        )
        ,
        print({`SHOWCUT`})
      )
    ,
    print({`(<-)`});
      andR('R);
      <(
        print({`___ R1 ___`});
          tac1rv0
        ,
        print({`___ R2 ___`});
          tac2rv0
      )
  )



  def allTRoHoL(caseName: String, tInst: String, roInst: String, hoInst: String): BelleExpr =
    dT(caseName) &
    allL("t".asVariable, tInst.asTerm)('L) &
    allL("ro".asVariable, roInst.asTerm)('L) &
    allL("ho".asVariable, hoInst.asTerm)('L) &
    dT(s"$caseName Inst")




*/
